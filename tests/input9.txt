Dice = {D1, D2}
Users = {Mike,John}
Number = {1,2,3,4}
Boolean = {T,F}
Constant = {CL2,CL3,CL4}
Conditions = {1,2}


Owner(Dice, Users)
Roll(Dice, Number)
//Even(Dice, Number, Boolean)
// DoRoll(Dice, Number)
InterveneRoll(Dice)
PossAssProbRoll(Dice, Number)

NumDefProbRoll(Dice, Constant)

AssProbRoll(Dice,Number)

PrApplied(Dice,Number,Conditions,Boolean)
UnAssProbRoll(Dice,Boolean, Boolean)
PossDefProbRoll(Dice,Number)

Owner(D1, Mike).
Owner(D2, John).
!Roll(d,n1) v !Roll(d,n2) v n1=n2. 
!Owner(d,p1) v !Owner(d,p2) v p1=p2.

// // ∗ ∗ ∗ ∗RandomSelection ∗ ∗ ∗ ∗
// DoRoll(d, n) => InterveneRoll(d).

!InterveneRoll(d) ^ !Roll(d,2) ^ !Roll(d,3) ^ !Roll(d,4) => Roll(d,1).
!InterveneRoll(d) ^ !Roll(d,1) ^ !Roll(d,3) ^ !Roll(d,4) => Roll(d,2).
!InterveneRoll(d) ^ !Roll(d,2) ^ !Roll(d,1) ^ !Roll(d,4) => Roll(d,3).
!InterveneRoll(d) ^ !Roll(d,2) ^ !Roll(d,3) ^ !Roll(d,1) => Roll(d,4).

!PossAssProbRoll(d,n) ^ !InterveneRoll(d) => PossDefProbRoll(d, n).

Roll(d,n1) ^ PossDefProbRoll(d, n1) ^ PossDefProbRoll(d, n2) ^ n1 != n2 => NumDefProbRoll(d, CL2).


Roll(d,n1) ^ PossDefProbRoll(d, n1) ^ PossDefProbRoll(d, n2) ^ PossDefProbRoll(d, n3) ^ n1 != n2 ^ n1 != n3 ^ n2 != n3 => NumDefProbRoll(d, CL3).

Roll(d,n1) ^ PossDefProbRoll(d, n1) ^ PossDefProbRoll(d, n2) ^ PossDefProbRoll(d, n3) ^ PossDefProbRoll(d, n4) ^ n1 != n2 ^ n1 != n3 ^ n1 != n4 ^ n2 != n3 ^ n2 != n4 ^ n3 != n4 => NumDefProbRoll(d, CL4).

-0.6931 !!NumDefProbRoll(d, CL2)
-0.4055 !!NumDefProbRoll(d, CL3)
-0.2877 !!NumDefProbRoll(d, CL4)

//Translation of probabilistic information
Owner(d, Mike) ^ !InterveneRoll(d) => PossAssProbRoll(d,3).
PossAssProbRoll(d,3) ^ Roll(d,3) => AssProbRoll(d,3).
-1.3863 !!AssProbRoll(d,3)

Owner(d, Mike) ^ !InterveneRoll(d) => PossAssProbRoll(d,4).
PossAssProbRoll(d,4) ^ Roll(d,4) => AssProbRoll(d,4).
-1.6094 !!AssProbRoll(d,4)

Owner(d,Mike) => PrApplied(d,3,1,T).
!PrApplied(d,3,1,T) => PrApplied(d,3,1,F).

Owner(d,Mike) => PrApplied(d,4,2,T).
!PrApplied(d,4,2,T) => PrApplied(d,4,2,F).

Roll(d, n) ^ PossDefProbRoll(d, n) ^ PrApplied(d,3,1,b1) ^ PrApplied(d,4,2,b2) => UnAssProbRoll(d,b1, b2).

-0.2231  !!UnAssProbRoll(d,F,T)
-0.2877  !!UnAssProbRoll(d,T,F)
-0.5978  !!UnAssProbRoll(d,T,T)
