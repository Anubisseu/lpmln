num={0,1}
load(num,num)
step(num,num)
temp(num,num)

step(a,b) => load(0,0) v step(0,1) v temp(1,1).

// step(a,b) ^ !load(0,0) ^ !step(0,1) => temp(1,1).
//step(a,b) ^ !temp(1,1) ^ !step(0,1) => load(0,0).
//step(a,b) ^ !temp(1,1) ^ !load(0,0) => step(0,1).
//parsing complete!
aux_load_0(num,num,num,num)
aux_load_0(_b,_a,a,b) <=> _a=0 ^ _b=0 ^ !step(0,1) ^ !temp(1,1) ^ step(a,b).
load(_a,_b) => (EXIST a,b (aux_load_0(_b,_a,a,b))).
aux_step_0(num,num,num,num)
aux_step_0(_b,_a,a,b) <=> _a=0 ^ _b=1 ^ !load(0,0) ^ !temp(1,1) ^ step(a,b).
step(_a,_b) => (EXIST a,b (aux_step_0(_b,_a,a,b))).
aux_temp_0(num,num,num,num)
aux_temp_0(_b,_a,a,b) <=> _a=1 ^ _b=1 ^ !load(0,0) ^ !step(0,1) ^ step(a,b).
temp(_a,_b) => (EXIST a,b (aux_temp_0(_b,_a,a,b))).
